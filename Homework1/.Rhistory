?plot
plot(res_mds$points[,1], res_mds$points[,2], type="n", main = "Multidimensional Scaling Plot")
text(res_mds$points[,1], res_mds$points[,2], labels(dist))
text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.9, xpd = TRUE)
rm(list=ls())
euroleague_23_24 <- read.csv2("euroleague_23_24.csv")
# a) Discard the variable “No” from the data set.
df <- subset(euroleague_23_24, select = -No)
# b) Split variable “Min” using strsplit() function. Give the name “aux” to the output. The first element of each row will show the mean minutes that the player played in total. (1p)
#--------Joan-----------------------------------------------------------------------------------
#Com que la columna Min expressa mean minutes played by the player (ho va aclarar la profe dijous a classe), l'unic que hem de fer es seleccionar la primera columna del string (minuts:segons:milisegons)
aux <- sapply(strsplit(df$Min, split=':'), function(x) x[1])
#---------Anna-------------------------------------------------------------------------------
# min_column = df[,"min"]
# min_column_splited = strsplit(min_column,split=':',fixed=TRUE)
# aux <- sapply(min_column_splited, function(x) {
#   as.numeric(x[1]) * 60 + as.numeric(x[2]) + as.numeric(x[3]) / 60
# })
# df<- data.frame(Aux = aux, df[,]
#     No acabo de entendre si un cop afegit la columna aux s'ha de borra la columna antiga de MIN
# c) Add a numerical variable to the data set named “Min 2” which shows on average how many minutes each player played in the game.
#--------Joan------------------------------------------------------------------------------------Com que la variable Min = average minutes played, simplement lhem de colocar a Min2 com a variable numèrica.
df$Min2 <- as.numeric(aux)
#---------Anna:-------------------------------------------------------------------------------
#games_played <- df[,5]
#min2 <- aux/games_played
#df <- data.frame(df[,1], Min2 = min2, df[,-1])
# d) Check the structure of the data and assign correct type to each variable considering whether it is a categorical or numerical variable.
str(df)
df$TEAM <- as.factor(df$TEAM)
df$PLAYER<- as.factor(df$PLAYER)
df$POSITION <- as.factor(df$POSITION)
df$GP <- as.numeric(df$GP)
df$GS <- as.numeric(df$GS)
df <- subset(df, select = -Min)
# a) Apply PCA on all the scaled numerical variables in the data set by using PCA() function in FactoMineR package. Treat the categorical variables and the variable “PIR” as suplemantary variables using arguments quali.sup and quanti.sup correctly. (3p)
library(FactoMineR)
pca_res <- PCA(df, scale.unit = TRUE, graph = FALSE,
quali.sup = which(names(df) %in% c("TEAM","PLAYER","POSITION")),
quanti.sup = which(names(df) == "PIR"))
pca_res$eig
# b) How many components should be extracted? Decide on the number of components considering eigenvalues. (3p)
pca_res$eig
# INTERPRETATION IN THE PDF FILE
# c) Interpret the loadings/correlations of variables at each dimension (3p).
pca_res$var$coord[, 1:4]
pca_res$var$cor[, 1:4]
# INTERPRETATION IN THE PDF FILE
# Dimension 1 :  df..1 (total minuts), GP (Games Played) GS (games started), PTS(points scored), DR(defensive rebounds), TR(total rebounds),  FC(Personal fouls committed), FD(Personal fouls drawn)
# Is combination of factors associated with performance or activity level
# Dimension 2 : OR(Offensive rebounds), AST(Assists), BLK(Blocks), TR(total rebounds), X2P(), X3P(),
# Contrast between defensive and offensive actions
# Dimension 3: Min2 (mean minutes played), X2P(), FT(Percentage of Free-throws)
# Smth like how the player plays and his position in the court
# probably representing  Power Forward (PF), Point Guard (PG) players (not sure if this is correct)
# Dimension 4: X3P(), Min2(mean minutes played), AST(Assists)
# smth like shows that the player plays more from outside the small area and shoots more X3P and do assists
# probably representing Shooting Guard players
# d) Use plot.PCA() function to show correlations between variables and the extracted dimensions. (For the variables you should use the argument choix = “var”). Plot all the extracted dimensions changing argument “axes”.(3p)
scores <- pca_res$ind$coord
plot.PCA(pca_res, choix = "var", axes = c(1, 2))
plot.PCA(pca_res, choix = "var", axes = c(1, 3))
plot.PCA(pca_res, choix = "var", axes = c(1, 4))
plot.PCA(pca_res, choix = "var", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "var", axes = c(2, 3))
plot.PCA(pca_res, choix = "var", axes = c(2, 4))
plot.PCA(pca_res, choix = "var", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "var", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "var", axes = c(3, 4))
# e) Interpret variable plots. How can each dimension be named? (5p)
# INTERPRETATION IN THE PDF FILE
# f) Show individual plots for the extracted dimensions changing argumennt choix=“ind” in plot.PCA() function. (2p)
plot.PCA(pca_res, choix = "ind", axes = c(1, 2))
plot.PCA(pca_res, choix = "ind", axes = c(1, 3))
plot.PCA(pca_res, choix = "ind", axes = c(1, 4))
plot.PCA(pca_res, choix = "ind", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "ind", axes = c(2, 3))
plot.PCA(pca_res, choix = "ind", axes = c(2, 4))
plot.PCA(pca_res, choix = "ind", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 4))
# g) Interpret the individual plots. (3p)
# INTERPRETATION IN THE PDF FILE
# a) Apply metric MDS using Euclidean distance on scaled numerical variables. (2p)
df <- subset(euroleague_23_24, select = -No)
player_names <- df$PLAYER
scaled_numerical_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
rownames(scaled_numerical_df) <- player_names
dist <- dist(scaled_numerical_df, method = "euclidean");
res_mds <- cmdscale(dist,eig=TRUE)
res_mds$points
res_mds$eig
res_mds$GOF
plot(res_mds$points[,1], res_mds$points[,2], type="n", main = "Multidimensional Scaling Plot")
text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.9, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], type="n", main = "Multidimensional Scaling Plot")
text(res_mds[, 1], res_mds[, 2], labels = rownames(scaled_numerical_df), cex = 0.9, xpd = TRUE)
text(res_mds[,1], res_mds[,2], labels = rownames(scaled_numerical_df), cex = 0.9, xpd = TRUE)
rm(list=ls())
euroleague_23_24 <- read.csv2("euroleague_23_24.csv")
# a) Discard the variable “No” from the data set.
df <- subset(euroleague_23_24, select = -No)
# b) Split variable “Min” using strsplit() function. Give the name “aux” to the output. The first element of each row will show the mean minutes that the player played in total. (1p)
#--------Joan-----------------------------------------------------------------------------------
#Com que la columna Min expressa mean minutes played by the player (ho va aclarar la profe dijous a classe), l'unic que hem de fer es seleccionar la primera columna del string (minuts:segons:milisegons)
aux <- sapply(strsplit(df$Min, split=':'), function(x) x[1])
#---------Anna-------------------------------------------------------------------------------
# min_column = df[,"min"]
# min_column_splited = strsplit(min_column,split=':',fixed=TRUE)
# aux <- sapply(min_column_splited, function(x) {
#   as.numeric(x[1]) * 60 + as.numeric(x[2]) + as.numeric(x[3]) / 60
# })
# df<- data.frame(Aux = aux, df[,]
#     No acabo de entendre si un cop afegit la columna aux s'ha de borra la columna antiga de MIN
# c) Add a numerical variable to the data set named “Min 2” which shows on average how many minutes each player played in the game.
#--------Joan------------------------------------------------------------------------------------Com que la variable Min = average minutes played, simplement lhem de colocar a Min2 com a variable numèrica.
df$Min2 <- as.numeric(aux)
#---------Anna:-------------------------------------------------------------------------------
#games_played <- df[,5]
#min2 <- aux/games_played
#df <- data.frame(df[,1], Min2 = min2, df[,-1])
# d) Check the structure of the data and assign correct type to each variable considering whether it is a categorical or numerical variable.
str(df)
df$TEAM <- as.factor(df$TEAM)
df$PLAYER<- as.factor(df$PLAYER)
df$POSITION <- as.factor(df$POSITION)
df$GP <- as.numeric(df$GP)
df$GS <- as.numeric(df$GS)
df <- subset(df, select = -Min)
# a) Apply PCA on all the scaled numerical variables in the data set by using PCA() function in FactoMineR package. Treat the categorical variables and the variable “PIR” as suplemantary variables using arguments quali.sup and quanti.sup correctly. (3p)
library(FactoMineR)
pca_res <- PCA(df, scale.unit = TRUE, graph = FALSE,
quali.sup = which(names(df) %in% c("TEAM","PLAYER","POSITION")),
quanti.sup = which(names(df) == "PIR"))
pca_res$eig
# b) How many components should be extracted? Decide on the number of components considering eigenvalues. (3p)
pca_res$eig
# INTERPRETATION IN THE PDF FILE
# c) Interpret the loadings/correlations of variables at each dimension (3p).
pca_res$var$coord[, 1:4]
pca_res$var$cor[, 1:4]
# INTERPRETATION IN THE PDF FILE
# Dimension 1 :  df..1 (total minuts), GP (Games Played) GS (games started), PTS(points scored), DR(defensive rebounds), TR(total rebounds),  FC(Personal fouls committed), FD(Personal fouls drawn)
# Is combination of factors associated with performance or activity level
# Dimension 2 : OR(Offensive rebounds), AST(Assists), BLK(Blocks), TR(total rebounds), X2P(), X3P(),
# Contrast between defensive and offensive actions
# Dimension 3: Min2 (mean minutes played), X2P(), FT(Percentage of Free-throws)
# Smth like how the player plays and his position in the court
# probably representing  Power Forward (PF), Point Guard (PG) players (not sure if this is correct)
# Dimension 4: X3P(), Min2(mean minutes played), AST(Assists)
# smth like shows that the player plays more from outside the small area and shoots more X3P and do assists
# probably representing Shooting Guard players
# d) Use plot.PCA() function to show correlations between variables and the extracted dimensions. (For the variables you should use the argument choix = “var”). Plot all the extracted dimensions changing argument “axes”.(3p)
scores <- pca_res$ind$coord
plot.PCA(pca_res, choix = "var", axes = c(1, 2))
plot.PCA(pca_res, choix = "var", axes = c(1, 3))
plot.PCA(pca_res, choix = "var", axes = c(1, 4))
plot.PCA(pca_res, choix = "var", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "var", axes = c(2, 3))
plot.PCA(pca_res, choix = "var", axes = c(2, 4))
plot.PCA(pca_res, choix = "var", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "var", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "var", axes = c(3, 4))
# e) Interpret variable plots. How can each dimension be named? (5p)
# INTERPRETATION IN THE PDF FILE
# f) Show individual plots for the extracted dimensions changing argumennt choix=“ind” in plot.PCA() function. (2p)
plot.PCA(pca_res, choix = "ind", axes = c(1, 2))
plot.PCA(pca_res, choix = "ind", axes = c(1, 3))
plot.PCA(pca_res, choix = "ind", axes = c(1, 4))
plot.PCA(pca_res, choix = "ind", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "ind", axes = c(2, 3))
plot.PCA(pca_res, choix = "ind", axes = c(2, 4))
plot.PCA(pca_res, choix = "ind", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 4))
# g) Interpret the individual plots. (3p)
# INTERPRETATION IN THE PDF FILE
# a) Apply metric MDS using Euclidean distance on scaled numerical variables. (2p)
df <- subset(euroleague_23_24, select = -No)
player_names <- df$PLAYER
scaled_numerical_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
rownames(scaled_numerical_df) <- player_names
dist <- dist(scaled_numerical_df, method = "euclidean");
res_mds <- cmdscale(dist,eig=TRUE)
res_mds$points
res_mds$eig
res_mds$GOF
plot(res_mds$points[,1], res_mds$points[,2], type="n", main = "Multidimensional Scaling Plot")
text(res_mds[,1], res_mds[,2], labels = rownames(scaled_numerical_df), cex = 0.9, xpd = TRUE)
text(res_mds$points[,1], res_mds$points[,2], labels = rownames(scaled_numerical_df), cex = 0.9, xpd = TRUE)
text(res_mds$points[,1], res_mds$points[,2], labels = rownames(dist), cex = 0.9, xpd = TRUE)
df <- subset(euroleague_23_24, select = -No)
player_names <- df$PLAYER
scaled_numerical_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
#rownames(scaled_numerical_df) <- player_names
dist <- dist(scaled_numerical_df, method = "euclidean");
res_mds <- cmdscale(dist,eig=TRUE)
text(res_mds$points[,1], res_mds$points[,2], labels = player_names, cex = 0.9, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], type="n", main = "Multidimensional Scaling Plot")
text(res_mds$points[,1], res_mds$points[,2], labels(player_names), cex = 0.9, xpd = TRUE)
?text
text(res_mds$points[,1], res_mds$points[,2], labels = player_names)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot")
text(res_mds$points[,1], res_mds$points[,2], labels = player_names)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot")
?text
text(res_mds$points[,1], res_mds$points[,2], labels = player_names)
text(res_mds$points[,1], res_mds$points[,2])
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot")
text(res_mds$points[,1], res_mds$points[,2])
rm(list=ls())
euroleague_23_24 <- read.csv2("euroleague_23_24.csv")
# a) Discard the variable “No” from the data set.
df <- subset(euroleague_23_24, select = -No)
# b) Split variable “Min” using strsplit() function. Give the name “aux” to the output. The first element of each row will show the mean minutes that the player played in total. (1p)
#--------Joan-----------------------------------------------------------------------------------
#Com que la columna Min expressa mean minutes played by the player (ho va aclarar la profe dijous a classe), l'unic que hem de fer es seleccionar la primera columna del string (minuts:segons:milisegons)
aux <- sapply(strsplit(df$Min, split=':'), function(x) x[1])
#---------Anna-------------------------------------------------------------------------------
# min_column = df[,"min"]
# min_column_splited = strsplit(min_column,split=':',fixed=TRUE)
# aux <- sapply(min_column_splited, function(x) {
#   as.numeric(x[1]) * 60 + as.numeric(x[2]) + as.numeric(x[3]) / 60
# })
# df<- data.frame(Aux = aux, df[,]
#     No acabo de entendre si un cop afegit la columna aux s'ha de borra la columna antiga de MIN
# c) Add a numerical variable to the data set named “Min 2” which shows on average how many minutes each player played in the game.
#--------Joan------------------------------------------------------------------------------------Com que la variable Min = average minutes played, simplement lhem de colocar a Min2 com a variable numèrica.
df$Min2 <- as.numeric(aux)
#---------Anna:-------------------------------------------------------------------------------
#games_played <- df[,5]
#min2 <- aux/games_played
#df <- data.frame(df[,1], Min2 = min2, df[,-1])
# d) Check the structure of the data and assign correct type to each variable considering whether it is a categorical or numerical variable.
str(df)
df$TEAM <- as.factor(df$TEAM)
df$PLAYER<- as.factor(df$PLAYER)
df$POSITION <- as.factor(df$POSITION)
df$GP <- as.numeric(df$GP)
df$GS <- as.numeric(df$GS)
df <- subset(df, select = -Min)
# a) Apply PCA on all the scaled numerical variables in the data set by using PCA() function in FactoMineR package. Treat the categorical variables and the variable “PIR” as suplemantary variables using arguments quali.sup and quanti.sup correctly. (3p)
library(FactoMineR)
pca_res <- PCA(df, scale.unit = TRUE, graph = FALSE,
quali.sup = which(names(df) %in% c("TEAM","PLAYER","POSITION")),
quanti.sup = which(names(df) == "PIR"))
pca_res$eig
# b) How many components should be extracted? Decide on the number of components considering eigenvalues. (3p)
pca_res$eig
# INTERPRETATION IN THE PDF FILE
# c) Interpret the loadings/correlations of variables at each dimension (3p).
pca_res$var$coord[, 1:4]
pca_res$var$cor[, 1:4]
# INTERPRETATION IN THE PDF FILE
# Dimension 1 :  df..1 (total minuts), GP (Games Played) GS (games started), PTS(points scored), DR(defensive rebounds), TR(total rebounds),  FC(Personal fouls committed), FD(Personal fouls drawn)
# Is combination of factors associated with performance or activity level
# Dimension 2 : OR(Offensive rebounds), AST(Assists), BLK(Blocks), TR(total rebounds), X2P(), X3P(),
# Contrast between defensive and offensive actions
# Dimension 3: Min2 (mean minutes played), X2P(), FT(Percentage of Free-throws)
# Smth like how the player plays and his position in the court
# probably representing  Power Forward (PF), Point Guard (PG) players (not sure if this is correct)
# Dimension 4: X3P(), Min2(mean minutes played), AST(Assists)
# smth like shows that the player plays more from outside the small area and shoots more X3P and do assists
# probably representing Shooting Guard players
# d) Use plot.PCA() function to show correlations between variables and the extracted dimensions. (For the variables you should use the argument choix = “var”). Plot all the extracted dimensions changing argument “axes”.(3p)
scores <- pca_res$ind$coord
plot.PCA(pca_res, choix = "var", axes = c(1, 2))
plot.PCA(pca_res, choix = "var", axes = c(1, 3))
plot.PCA(pca_res, choix = "var", axes = c(1, 4))
plot.PCA(pca_res, choix = "var", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "var", axes = c(2, 3))
plot.PCA(pca_res, choix = "var", axes = c(2, 4))
plot.PCA(pca_res, choix = "var", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "var", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "var", axes = c(3, 4))
# e) Interpret variable plots. How can each dimension be named? (5p)
# INTERPRETATION IN THE PDF FILE
# f) Show individual plots for the extracted dimensions changing argumennt choix=“ind” in plot.PCA() function. (2p)
plot.PCA(pca_res, choix = "ind", axes = c(1, 2))
plot.PCA(pca_res, choix = "ind", axes = c(1, 3))
plot.PCA(pca_res, choix = "ind", axes = c(1, 4))
plot.PCA(pca_res, choix = "ind", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "ind", axes = c(2, 3))
plot.PCA(pca_res, choix = "ind", axes = c(2, 4))
plot.PCA(pca_res, choix = "ind", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 4))
# g) Interpret the individual plots. (3p)
# INTERPRETATION IN THE PDF FILE
# a) Apply metric MDS using Euclidean distance on scaled numerical variables. (2p)
df <- subset(euroleague_23_24, select = -No)
player_names <- df$PLAYER
scaled_numerical_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
#rownames(scaled_numerical_df) <- player_names
dist <- dist(scaled_numerical_df, method = "euclidean");
res_mds <- cmdscale(dist,eig=TRUE)
res_mds$points
res_mds$eig
res_mds$GOF
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot")
text(res_mds$points[,1], res_mds$points[,2])
text(res_mds$points[,1], res_mds$points[,2], dist)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot"); text(res_mds$points[,1], res_mds$points[,2], dist)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot"); text(res_mds$points[,1], res_mds$points[,2], labels = player_names)
df <- subset(euroleague_23_24, select = -No)
player_names <- df$PLAYER
scaled_numerical_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
rownames(scaled_numerical_df) <- player_names
dist <- dist(scaled_numerical_df, method = "euclidean");
res_mds <- cmdscale(dist,eig=TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot"); text(res_mds$points[,1], res_mds$points[,2], labels(dist))
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot"); text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.9, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot"); text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.6, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot"); text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.4, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = ""); text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.4, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.4, xpd = TRUE)
# c) Interpret the plot.(3p)
new_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
new_df$POSITION <- df$POSITION
rownames(scaled_numerical_df) <- player_names
?dist
new_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
new_df$POSITION <- df$POSITION
rownames(scaled_numerical_df) <- player_names
daisy(new_df,metric = "gower")
library(cluster)
?daisy
package.install(cluster)
detach("package:cluster", unload = TRUE)
library(cluster, lib.loc = "C:/Program Files/R/R-4.3.3/library")
library(cluster)
new_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
new_df$POSITION <- df$POSITION
rownames(scaled_numerical_df) <- player_names
daisy(new_df,metric = "gower")
rm(list=ls())
euroleague_23_24 <- read.csv2("euroleague_23_24.csv")
# a) Discard the variable “No” from the data set.
df <- subset(euroleague_23_24, select = -No)
# b) Split variable “Min” using strsplit() function. Give the name “aux” to the output. The first element of each row will show the mean minutes that the player played in total. (1p)
#--------Joan-----------------------------------------------------------------------------------
#Com que la columna Min expressa mean minutes played by the player (ho va aclarar la profe dijous a classe), l'unic que hem de fer es seleccionar la primera columna del string (minuts:segons:milisegons)
aux <- sapply(strsplit(df$Min, split=':'), function(x) x[1])
#---------Anna-------------------------------------------------------------------------------
# min_column = df[,"min"]
# min_column_splited = strsplit(min_column,split=':',fixed=TRUE)
# aux <- sapply(min_column_splited, function(x) {
#   as.numeric(x[1]) * 60 + as.numeric(x[2]) + as.numeric(x[3]) / 60
# })
# df<- data.frame(Aux = aux, df[,]
#     No acabo de entendre si un cop afegit la columna aux s'ha de borra la columna antiga de MIN
# c) Add a numerical variable to the data set named “Min 2” which shows on average how many minutes each player played in the game.
#--------Joan------------------------------------------------------------------------------------Com que la variable Min = average minutes played, simplement lhem de colocar a Min2 com a variable numèrica.
df$Min2 <- as.numeric(aux)
#---------Anna:-------------------------------------------------------------------------------
#games_played <- df[,5]
#min2 <- aux/games_played
#df <- data.frame(df[,1], Min2 = min2, df[,-1])
# d) Check the structure of the data and assign correct type to each variable considering whether it is a categorical or numerical variable.
str(df)
df$TEAM <- as.factor(df$TEAM)
df$PLAYER<- as.factor(df$PLAYER)
df$POSITION <- as.factor(df$POSITION)
df$GP <- as.numeric(df$GP)
df$GS <- as.numeric(df$GS)
df <- subset(df, select = -Min)
# a) Apply PCA on all the scaled numerical variables in the data set by using PCA() function in FactoMineR package. Treat the categorical variables and the variable “PIR” as suplemantary variables using arguments quali.sup and quanti.sup correctly. (3p)
library(FactoMineR)
pca_res <- PCA(df, scale.unit = TRUE, graph = FALSE,
quali.sup = which(names(df) %in% c("TEAM","PLAYER","POSITION")),
quanti.sup = which(names(df) == "PIR"))
pca_res$eig
# b) How many components should be extracted? Decide on the number of components considering eigenvalues. (3p)
pca_res$eig
# INTERPRETATION IN THE PDF FILE
# c) Interpret the loadings/correlations of variables at each dimension (3p).
pca_res$var$coord[, 1:4]
pca_res$var$cor[, 1:4]
# INTERPRETATION IN THE PDF FILE
# Dimension 1 :  df..1 (total minuts), GP (Games Played) GS (games started), PTS(points scored), DR(defensive rebounds), TR(total rebounds),  FC(Personal fouls committed), FD(Personal fouls drawn)
# Is combination of factors associated with performance or activity level
# Dimension 2 : OR(Offensive rebounds), AST(Assists), BLK(Blocks), TR(total rebounds), X2P(), X3P(),
# Contrast between defensive and offensive actions
# Dimension 3: Min2 (mean minutes played), X2P(), FT(Percentage of Free-throws)
# Smth like how the player plays and his position in the court
# probably representing  Power Forward (PF), Point Guard (PG) players (not sure if this is correct)
# Dimension 4: X3P(), Min2(mean minutes played), AST(Assists)
# smth like shows that the player plays more from outside the small area and shoots more X3P and do assists
# probably representing Shooting Guard players
# d) Use plot.PCA() function to show correlations between variables and the extracted dimensions. (For the variables you should use the argument choix = “var”). Plot all the extracted dimensions changing argument “axes”.(3p)
scores <- pca_res$ind$coord
plot.PCA(pca_res, choix = "var", axes = c(1, 2))
plot.PCA(pca_res, choix = "var", axes = c(1, 3))
plot.PCA(pca_res, choix = "var", axes = c(1, 4))
plot.PCA(pca_res, choix = "var", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "var", axes = c(2, 3))
plot.PCA(pca_res, choix = "var", axes = c(2, 4))
plot.PCA(pca_res, choix = "var", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "var", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "var", axes = c(3, 4))
# e) Interpret variable plots. How can each dimension be named? (5p)
# INTERPRETATION IN THE PDF FILE
# f) Show individual plots for the extracted dimensions changing argumennt choix=“ind” in plot.PCA() function. (2p)
plot.PCA(pca_res, choix = "ind", axes = c(1, 2))
plot.PCA(pca_res, choix = "ind", axes = c(1, 3))
plot.PCA(pca_res, choix = "ind", axes = c(1, 4))
plot.PCA(pca_res, choix = "ind", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "ind", axes = c(2, 3))
plot.PCA(pca_res, choix = "ind", axes = c(2, 4))
plot.PCA(pca_res, choix = "ind", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "ind", axes = c(3, 4))
# g) Interpret the individual plots. (3p)
# INTERPRETATION IN THE PDF FILE
player_names <- df$PLAYER
scaled_numerical_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
rownames(scaled_numerical_df) <- player_names
dist <- dist(scaled_numerical_df, method = "euclidean");
res_mds <- cmdscale(dist,eig=TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels(dist), cex = 0.4, xpd = TRUE)
library(cluster)
new_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
new_df$POSITION <- df$POSITION
rownames(scaled_numerical_df) <- player_names
daisy(new_df,metric = "gower")
new_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
new_df$POSITION <- df$POSITION
rownames(new_df) <- player_names
daisy(new_df,metric = "gower")
new_df <- as.data.frame(scale(df[sapply(df, is.numeric)]))
new_df$POSITION <- df$POSITION
rownames(new_df) <- player_names
gowerdist <- daisy(new_df,metric = "gower")
res_mds <- cmdscale(gowerdist,eig=TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels(gowerdist), cex = 0.4, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels = df$TEAM, cex = 0.4, xpd = TRUE)
# Plot individuals by position
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels = df$POSITION, cex = 0.4, xpd = TRUE)
# Plot individuals by team name
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels = df$TEAM, cex = 0.4, xpd = TRUE)
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels = df$PTS, cex = 0.4, xpd = TRUE)
# Plot individuals by points
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels = df$Min2, cex = 0.4, xpd = TRUE)
# Plot individuals by minutes played
plot(res_mds$points[,1], res_mds$points[,2], main = "Multidimensional Scaling Plot", type = "n", xlab = "", ylab = "", axes = FALSE,); text(res_mds$points[,1], res_mds$points[,2], labels = df$PIR, cex = 0.4, xpd = TRUE)
rm(list=ls())
euroleague_23_24 <- read.csv2("euroleague_23_24.csv")
# a) Discard the variable “No” from the data set.
df <- subset(euroleague_23_24, select = -No)
# b) Split variable “Min” using strsplit() function. Give the name “aux” to the output. The first element of each row will show the mean minutes that the player played in total. (1p)
#--------Joan-----------------------------------------------------------------------------------
#Com que la columna Min expressa mean minutes played by the player (ho va aclarar la profe dijous a classe), l'unic que hem de fer es seleccionar la primera columna del string (minuts:segons:milisegons)
aux <- sapply(strsplit(df$Min, split=':'), function(x) x[1])
#---------Anna-------------------------------------------------------------------------------
# min_column = df[,"min"]
# min_column_splited = strsplit(min_column,split=':',fixed=TRUE)
# aux <- sapply(min_column_splited, function(x) {
#   as.numeric(x[1]) * 60 + as.numeric(x[2]) + as.numeric(x[3]) / 60
# })
# df<- data.frame(Aux = aux, df[,]
#     No acabo de entendre si un cop afegit la columna aux s'ha de borra la columna antiga de MIN
# c) Add a numerical variable to the data set named “Min 2” which shows on average how many minutes each player played in the game.
#--------Joan------------------------------------------------------------------------------------Com que la variable Min = average minutes played, simplement lhem de colocar a Min2 com a variable numèrica.
df$Min2 <- as.numeric(aux)
#---------Anna:-------------------------------------------------------------------------------
#games_played <- df[,5]
#min2 <- aux/games_played
#df <- data.frame(df[,1], Min2 = min2, df[,-1])
# d) Check the structure of the data and assign correct type to each variable considering whether it is a categorical or numerical variable.
str(df)
df$TEAM <- as.factor(df$TEAM)
df$PLAYER<- as.factor(df$PLAYER)
df$POSITION <- as.factor(df$POSITION)
df$GP <- as.numeric(df$GP)
df$GS <- as.numeric(df$GS)
df <- subset(df, select = -Min)
# a) Apply PCA on all the scaled numerical variables in the data set by using PCA() function in FactoMineR package. Treat the categorical variables and the variable “PIR” as suplemantary variables using arguments quali.sup and quanti.sup correctly. (3p)
library(FactoMineR)
pca_res <- PCA(df, scale.unit = TRUE, graph = FALSE,
quali.sup = which(names(df) %in% c("TEAM","PLAYER","POSITION")),
quanti.sup = which(names(df) == "PIR"))
pca_res$eig
# b) How many components should be extracted? Decide on the number of components considering eigenvalues. (3p)
pca_res$eig
# INTERPRETATION IN THE PDF FILE
# c) Interpret the loadings/correlations of variables at each dimension (3p).
pca_res$var$coord[, 1:4]
pca_res$var$cor[, 1:4]
# INTERPRETATION IN THE PDF FILE
# Dimension 1 :  df..1 (total minuts), GP (Games Played) GS (games started), PTS(points scored), DR(defensive rebounds), TR(total rebounds),  FC(Personal fouls committed), FD(Personal fouls drawn)
# Is combination of factors associated with performance or activity level
# Dimension 2 : OR(Offensive rebounds), AST(Assists), BLK(Blocks), TR(total rebounds), X2P(), X3P(),
# Contrast between defensive and offensive actions
# Dimension 3: Min2 (mean minutes played), X2P(), FT(Percentage of Free-throws)
# Smth like how the player plays and his position in the court
# probably representing  Power Forward (PF), Point Guard (PG) players (not sure if this is correct)
# Dimension 4: X3P(), Min2(mean minutes played), AST(Assists)
# smth like shows that the player plays more from outside the small area and shoots more X3P and do assists
# probably representing Shooting Guard players
# d) Use plot.PCA() function to show correlations between variables and the extracted dimensions. (For the variables you should use the argument choix = “var”). Plot all the extracted dimensions changing argument “axes”.(3p)
scores <- pca_res$ind$coord
plot.PCA(pca_res, choix = "var", axes = c(1, 2))
plot.PCA(pca_res, choix = "var", axes = c(1, 3))
plot.PCA(pca_res, choix = "var", axes = c(1, 4))
plot.PCA(pca_res, choix = "var", axes = c(2, 1)) # same as 1,2
plot.PCA(pca_res, choix = "var", axes = c(2, 3))
plot.PCA(pca_res, choix = "var", axes = c(2, 4))
plot.PCA(pca_res, choix = "var", axes = c(3, 1)) # same as 1,3
plot.PCA(pca_res, choix = "var", axes = c(3, 2)) # same as 2,3
plot.PCA(pca_res, choix = "var", axes = c(3, 4))
# e) Interpret variable plots. How can each dimension be named? (5p)
# INTERPRETATION IN THE PDF FILE
